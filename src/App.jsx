import { useEffect, useRef, useState } from 'react'
import axios from 'axios';
import reactLogo from './assets/react.svg'
import viteLogo from '/vite.svg'
import './App.scss'
import Todo from './assets/components/Todo'
import TodoForm from './assets/components/TodoForm'


const API_URL = 'http://localhost:5000/todos';

function App() {

// üí° GESTION DES LISTES
// State, comportements, affichage, vont interragir les un avec les autres via des flues. Ce sont ses flues la qui vont rendre nos compostant interactif.

// state (√©tat ou des donn√©es) Accueil de la donn√©es dynamique qu'on va procheter sur notre affichage, pour le rendre dynamiue lui aussi.
const [todos, setTodos] = useState([]);


//const inputRef = useRef();

// Charger les todos depuis JSON seveur 
useEffect(() => {
  axios
    .get(API_URL)
    .then(response => setTodos(response.data))
    .catch(error => console.error('Erreur lrs du chargement des todos:', error));
}, []);

// Comportements (on va pouvoir d√©crire de mani√®re compl√®tement arbitraire ce qu'ils font au niveau de ses instruction. 
// Souvent les instructions vont impliquer de modifi√© le State et lorsque le State est modifi√© le composant va r√©agir --> React de la il va r√©actualis√© l'affichage. --> rerender)
const handleDelete = async (id) => {
  try {
      // Envoi de la requ√™te DELETE au serveur
      const response = await fetch(`http://localhost:5000/todos/${id}`, {
          method: 'DELETE',
      });

      // V√©rification de la r√©ponse
      if (!response.ok) {
          throw new Error(`Erreur serveur : ${response.status} ${response.statusText}`);
      }

      // Mise √† jour de l'√©tat local apr√®s suppression r√©ussie sur le serveur
      const todosUpdated = todos.filter(todo => todo.id !== id);
      setTodos(todosUpdated);
  } catch (error) {
      console.error("Erreur lors de la suppression sur le serveur :", error);
      alert("La suppression c√¥t√© serveur a √©chou√©. Veuillez v√©rifier la connexion ou l'ID.");
  }
};


const handleAdd = (todoAAjouter) =>{
  axios
    .post(API_URL, todoAAjouter)
    .then(response => setTodos([...todos, response.data]))
    .catch(error => console.error('Erreur lors de ajout du todo:', error));
   //1. Copie du State
  const todosCopy = [...todos]
  //2. Manipulation sur la copie su State
  todosCopy.push(todoAAjouter);
  //3. Modifier le State avec le setter d√©dier
  setTodos(todosCopy);
}

const handleEdit = (id, newName) => {
   // Mise √† jour sur le serveur
  axios
  .patch(`${API_URL}/${id}`, { nom: newName })
  .then(() => {
  setTodos(
    todos.map( (todo) =>
      todo.id === id ? {...todo, nom: newName, isEditing: false} : todo
    )
  );
})
.catch((error) => console.error('Erreur lors de la modification du todo:', error));
};

const toggleEditMode = (id) => {
  setTodos(
    todos.map((todo) =>
      todo.id === id ? {...todo, isEditing: !todo.isEditing } : todo
    )
  );
}

//lorsque une fonction est li√© √† un √©v√®nement, cette fonction va re√ßevoir dans ses param√®tres l'√©v√®nement.
// Avec l'objet event on va pouvoir acc√©der √† sa m√©thode preventDefault. On va l'appeler avec () pour empecher le rechargement de la page.

// Affichage (render) sur chacun de ses √©l√©ments d'affichage on va brancher des comportements via des √©v√©nements.
return (
  <div className="todo-app">
    <h1>Todo List</h1>
    <TodoForm handleAdd={handleAdd} />
    <ul className="todo-list">
      {todos.map((todo) => (
        <Todo 
          todoInfo={todo} 
          onTodoDelete={handleDelete} 
          key={todo.id}
          onTodoEdit={handleEdit}
          toggleEditMode={toggleEditMode}
        />
      ))}
    </ul>
    
  </div>
);

}

export default App


// üí° GESTION DU FORMULAIRES

// 1. cr√©ation du formaulaire

// 2. soumission du formulaire (onSubmit / handleSubmit)

// 3. collecte des donn√©es du formulaire

// 3a. Premi√®re m√©thode que l'on √©vite. 
// Pourquoi ? Car useRef et inputRef ne provoque pas de rerender automatique du composant et de l'affichage. Il ne passe pas par le State. On l'√©vite pour g√©rer les donn√©es dns un formulaire.
// On manupile JAMAIS au DOM directement, on laisse React manipuler l'affichage pour nous.
// M√©thide 1: documentGetElementById et QuerySelector "React" (useRef)
// c'est la que interviens UseRef. c'est un Hook, une fonction de la librairie React qui lorsque elle est appeler va cr√©e un object r√©f√©rence, 
// qu'on va pouvoir stocker dans une variable. 
// Cette variable la on va l'associer a un √©l√©ment d'affichage en particulier.
// De fait, quand on va appeler cette variable, on va faire r√©f√©rence pour ensuite le manipuler comme on veut.

// 3b. Deuxi√®me m√©thode qu'on utilise souvent.
// M√©thode synchrnisation d√©scendante, ascendante. (onChange / handleChange)
// Attention!!! On ne change JAMAIS la valeur du State direcgement. On est obliger de pass√© par son setter si on veut qu'il y ai un update au niveau de l'affichage.
// donc on prend la valeur handleChnage et intersepter cette valeur la, on la balance dans le setter du State concerne pour qu'il le modifie et ensuite quand il est modifier il va actualiser l'affichage.

// todosCopy.push({id: id, nom: nom}); 
// quand le nom de la valeur et le nom de la clef sont identique dans une propri√©t√© on peut supp. :nom et :id


